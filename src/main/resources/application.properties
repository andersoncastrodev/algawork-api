spring.datasource.url=jdbc:mysql://localhost:3306/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=admin
spring.datasource.password=123456

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create

#carregado o script que popula as tabelas.
spring.flyway.locations=classpath:db/migration,classpath:db/testdata

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


#para permitir valores inexistente na api.
spring.jackson.deserialization.fail-on-unknown-properties=true
spring.jackson.deserialization.fail-on-ignored-properties=true

#para permitir valores inexistente na api.
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

#Tamanho de upload de arquivos
#spring.servlet.multipart.max-file-size=20KB
#spring.servlet.multipart.max-request-size=20MB

#Local do upload das fotos
algafood.storage.local.diretorio-fotos=/home/anderson/Imagens/UploadAlgaWorks


#Configuração para Swagger funcionar
spring.mvc.pathmatch.matching-strategy=ant-path-matcher


#Colocando Usuario e Senha Padrao para Spring Security
#spring.security.user.name=algaworks
#spring.security.user.password=123456

#logging.loggly.token=seu_customer_token_aqui

#Usando para o projeto algaworks-api reconhece e tratar os Tokens
spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8036/oauth/check_token
spring.security.oauth2.resourceserver.opaquetoken.client-id=checktoken
spring.security.oauth2.resourceserver.opaquetoken.client-secret=check123

